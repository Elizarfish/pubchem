import openpyxl
from openpyxl.worksheet import worksheet
import pubchempy as pcp
import argparse
import re
import requests
import os
import shutil
from requests.api import head
from openpyxl import Workbook

def parseCompounds(inpFile):
    compounds = open(inpFile, "r").read().split("\n")
    failed = []
    if(os.path.isfile(".\\substances_base.xlsx")):
        os.remove(".\\substances_base.xlsx")

    dir = ".\\input_files"
    if os.path.exists(dir):
        shutil.rmtree(dir, ignore_errors = True)
    os.mkdir(".\\input_files")
    
    WorkBook = Workbook()
    WorkSheet = WorkBook.active

    WorkSheet["A1"] = "Compound"
    WorkSheet["B1"] = "Cas"
    WorkSheet["C1"] = "PubChemID"
    WorkSheet["D1"] = "MW"
    WorkSheet["E1"] = "XLogP3"
    WorkSheet["F1"] = "Hydrogen Bond Donor Count"
    WorkSheet["G1"] = "Hydrogen Bond Acceptor Count"
    WorkSheet["H1"] = "Rotatable Bond Count"
    WorkSheet["I1"] = "Topological Polar Surface Area"
    WorkSheet["J1"] = "Formal Charge"
    WorkSheet["K1"] = "Defined Atom Stereocenter Count"
    WorkSheet["L1"] = "Undefined Atom Stereocenter Count"
    WorkSheet["M1"] = "Defined Bond Stereocenter Count"
    WorkSheet["N1"] = "Undefined Bond Stereocenter Count"
    WorkSheet["O1"] = "Caco2 Permeability"
    WorkSheet["P1"] = "COSMO AREA (A2)"
    WorkSheet["Q1"] = "COSMO VOLUME(A3)"
    WorkSheet["R1"] = "HOMO (eV)"
    WorkSheet["S1"] = "LUMO (eV)"
    WorkSheet["T1"] = "HOMO-LUMO GAP"
    WorkSheet["U1"] = "DIPOLE X (D)"
    WorkSheet["V1"] = "DIPOLE Y (D)"
    WorkSheet["W1"] = "DIPOLE Z (D)"
    WorkSheet["X1"] = "DIPOLE"
    WorkSheet["Y1"] = "ALFA at 0 eV (A3)"
    WorkSheet["Z1"] = "BETA at 0 eV (ESU e-29)"
    WorkSheet["AA1"] = "GAMMA at 0 eV (X10-39)"

    index = 2
    for compound in compounds:
        print("[*] processing", compound)
        if len(pcp.get_cids(compound)) == 0:
            print("not found", compound)
            failed.append(compound)
            continue
        cid = pcp.get_cids(compound)[0]
        compoundObj = pcp.Compound.from_cid(cid)

        compoundSynonyms = compoundObj.synonyms
        compoundName = compoundObj.synonyms[0]
        WorkSheet["A" + str(index)] = compoundName

        compoundCas = ""
        for syn in compoundSynonyms:
            if re.match("\d{1,7}\-\d{2}\-\d", syn):
                compoundCas = syn
                break
        WorkSheet["B" + str(index)] = compoundCas

        compoundPCID = cid
        WorkSheet["C" + str(index)] = compoundPCID

        compoundMW = compoundObj.molecular_weight
        WorkSheet["D" + str(index)] = compoundMW

        compoundXlogP = compoundObj.xlogp
        WorkSheet["E" + str(index)] = compoundXlogP

        compoundHBDC = compoundObj.h_bond_donor_count
        WorkSheet["F" + str(index)] = compoundHBDC
        
        compoundHBAC = compoundObj.h_bond_acceptor_count
        WorkSheet["G" + str(index)] = compoundHBAC

        compoundRBC = compoundObj.rotatable_bond_count
        WorkSheet["H" + str(index)] = compoundRBC

        compoundTPSA = compoundObj.tpsa
        WorkSheet["I" + str(index)] = compoundTPSA

        compoundFC = compoundObj.charge
        WorkSheet["J" + str(index)] = compoundFC

        compoundDASC = compoundObj.defined_atom_stereo_count
        WorkSheet["K" + str(index)] = compoundDASC

        compoundUASC = compoundObj.undefined_atom_stereo_count
        WorkSheet["L" + str(index)] = compoundUASC

        compoundDBSC = compoundObj.defined_bond_stereo_count
        WorkSheet["M" + str(index)] = compoundDBSC

        compoundUBSC = compoundObj.undefined_bond_stereo_count
        WorkSheet["N" + str(index)] = compoundUBSC

        sdf = requests.get("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/" + str(cid) + "/record/SDF/?record_type=3d")
        if(sdf.status_code == 404):
            print("404 on sdf", compound)
            failed.append(compound)
            continue
        
        file = ".\\input_files\c" + str(index - 1) + ".inp"
        print("creating file", file)

        coords = sdf.text.split("\n\n")[1].split("\n")[1:len(compoundObj.atoms) + 1]

        with open(file, 'w') as outFile:
            outFile.write("* ===============================\n")
            outFile.write("* Input file for Mopac\n")
            outFile.write("* ===============================\n")
            outFile.write("PM7 XYZ  EPS=78.39 RSOLV=1.3 CHARGE=0 LET GNORM=0.00001 POLAR Singlet  BONDS AUX \n")
            outFile.write("\n")
            outFile.write("Mopac file generated by Gabedit\n")

            for line in coords:
                line = line.strip().split(' ')
                while "" in line:
                    line.remove("")
                outFile.write(line[3] + " " + line[2] + " " + str(1) + " " + line[1] + " " + str(1) + " " + line[0] + " " + str(1) + "\n")

        index = index + 1

    file = open(".\\failed.txt", "w")
    for line in failed:
        file.write(line)
    file.close
    WorkBook.save(".\\substances_base.xlsx")

def parseMOPAC(inpDir):
    WorkBook = openpyxl.load_workbook(".\\substances_base.xlsx")
    WorkSheet = WorkBook.active

    fileCounter = len(os.listdir(inpDir))
    index = 2
    for file in range(1, fileCounter + 1):
        print("processing", inpDir + "c" + str(file) + ".out", "with line", str(index))
        text = open(inpDir + "c" + str(file) + ".out").read().split("\n")
        alphaFlag = False
        betaFlag = False
        gammaFlag = False

        for line in text:
            if "COSMO AREA" in line:
                WorkSheet["P" + str(index)] = re.search("\-?\d+\.?\d+", line).group(0)
            if "COSMO VOLUME" in line:
                WorkSheet["Q" + str(index)] = re.search("\-?\d+\.?\d+", line).group(0)
            if "HOMO LUMO" in line:
                match = re.findall("-?\d+\.?\d+", line)
                WorkSheet["R" + str(index)] = match[0]
                WorkSheet["S" + str(index)] = match[1]
                WorkSheet["T" + str(index)] = float(match[1]) - float(match[0])
            if "SUM" in line:
                match = re.findall("-?\d+\.?\d+", line)
                WorkSheet["U" + str(index)] = match[0]
                WorkSheet["V" + str(index)] = match[1]
                WorkSheet["W" + str(index)] = match[2]
                WorkSheet["X" + str(index)] = match[3]
            if "ISOTROPIC AVERAGE ALPHA" in line and not alphaFlag:
                match = re.findall("-?\d+\.?\d+", line)
                WorkSheet["Y" + str(index)] = match[1]
                alphaFlag = True
            if "AVERAGE BETA " in line and not betaFlag:
                WorkSheet["Z" + str(index)] = line.split(" ")[-2]
                betaFlag = True
            if "AVERAGE GAMMA " in line and not gammaFlag:
                WorkSheet["AA" + str(index)] = line.split(" ")[-3]
                gammaFlag = True
            
        index = index + 1

    WorkBook.save(".\\substances_base.xlsx")
                    

def main():
    parser = argparse.ArgumentParser(description = "PubChemp parser")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-f", "--file", dest = "inpFile", help = "input file w/ list of compounds", type = str)
    group.add_argument("-d", "--directory", dest = "inpDir", help = "input directory w/ output MOPAC files", type = str)
    args = parser.parse_args()

    if(args.inpDir == None):
        parseCompounds(args.inpFile)
    else:
        parseMOPAC(args.inpDir)

if __name__ == "__main__":
    main()